###################
## Caelainn Barr ##
## The Guardian  ##
## @caelainnbarr ##
###################

#############################
## Introduction & Software ##
#############################

#Welcome to R!

#Over the next two days we're going to get grounded in using R and RStudio
#Today we're going to start with the basics of installation, getting familiar with RStudio
#Then we'll move on to look at data types in R, how to transform and join data in R
#We'll wrap up today with looking at some basic statistics in R

#Tomorrow we're going to kick off the morning by putting our skills into practice
#We'll learn about how to perform a linear regression in R and discuss how to report our findings
#Then we're going to look at visuals and the grammar of graphics in RStudio
#Finally we'll wrap up by looking at some useful packages - including using APIs and joining large data sets 

#Firstly today we're going to make sure everyone has R and RStudio correctly installed
#In order to do this you'll need to open the document called "R & RStudio Installation Oct 2016"

#############################
## Overview of R & RStudio ##
#############################

#In this session we'll discuss the origins and basic functions of R

#In this class we'll look at:
#1. What is R?
#2. What can R be used for?
#3. A tour around R & RStudio

##################
##1. What is R? ##
##################

#R is a programming language and open-source statistical programming tool 
#It can be used for data analysis, visualising data and developing software
#We're going to use RStudio where you can see your data and commands in 4 panels
#The four panels are the console, where you execute commands; 
#A history panel; a workspace for display and a file/plot space

###############################
##2. What can R be used for? ##
###############################

#There are many reasons why R has become more popular in recent years
#Some of the reasons are that it can be used for analysis and visuals
#It’s powerful, free, has a large community of users and packages

#This is an R script
#It allows you to track your work and save all the changes you have made in R
#That way you can check and reproduce your work

#It's important to document your work clearly so you can reproduce it
#The best way to do that is to comment your script comprehensively and clearly
#A comment explains what it is your script intends to do
#By starting a line with a hashtag, it becomes a comment and will not be run as a line of code

#At the start of this session we also just opened a project in RStudio
#You can tell what project you are working on by looking in the upper right corner of RStudio
#A project allows you to keep all your scripts, data and analysis in one place
#So you should approach your stories by using different projects where you can store all your work

#################################
##3. A tour around R & RStudio ##
#################################

#R is the program and language
#RStudio is the user interface or GUI that we’ll be using

#RStudio is useful as you can see your data and commands in 4 panels
#The four panels are: 

#1.The console is in the bottom left corner
#This is where you execute or run commands
#Let’s try to run a command
#You can use the console like a calculator or the command line

5+5

5*10

#Now you can try typing in a command…

#Now let's calculate the square root of a number
#The function is "sqrt"
sqrt(100)

#Let's take a closer look at what is happening in that command...

#One of the things that R allows you to do is assign useful commands to memory
#This is called object-oriented programming
#One of the key features of R is that it acts as an object oriented programming language
#Object oriented programming means you can assign results to an object
#Therefore when you recall an object it returns what was assigned to the object 

x <- 3*123

x

#Let's take a closer look at what is happening with the operation above...

#You can also create ordered lists of numbers, called vectors and assign them to variables

y <- 1:10

y

#This is a very useful feature in R and is called object oriented programming
#Now you can try assigning a series of numbers to an object

#2.The source editor
#This is directly above the console, in the top left corner
#Here you can write and edit scripts
#You can also run scripts from this area
#You can do this by hitting Control & Enter as you go through the script
#Other useful shortcuts are the up arrow, which runs through the previous commands
#While tab helps you to auto-complete the function you've started to type

#Enter a line of code here by assigning something to an object, comment it and then execute it....

#The source also acts as a data-viewer
#When you open a data set, it will appear here
#That way you can view and inspect data sets that are loaded into the R environment

#3.The workspace 
#In the top right corner is the workspace 
#Here you can view objects in the global environment
#This means viewing what else is loaded onto the directory the scripts are being run from
#You can also use the top right corner pane to search your command history
#This allows you to see the scripts and commands you have used in context
#It can be useful when you want to reuse parts of a script or trace back the code you have tried and used

#What does the history pane show you so far?

#4.File and plot space 
#This is in the lower right pane 
#Here you can view the packages you have installed, plots that you make and R help
#What can you see is loaded into the Studio environment under the “File” tab?

#You can get different views by toggling between different screens
#Let’s look at the help command for View
#Type this into the console

??View

###############################
## Loading data into RStudio ##
###############################

#In this session we'll discuss getting data into RStudio and data types

#In this class we'll look at:
#1. Getting data into RStudio
#2. Data types in R
#3. Getting familiar with our data

#################################
##1. Getting data into RStudio ##
#################################

#In order to work in RStudio, we’re going to need to load some data

#There is some data already in our project, see the file panel
#What is it called?

#The data named DE_EDHIW and DE_PILW is from a group called the Luxembourg Income Study
#The LIS data is based on microdata

#Earlier this year the Guardian published a series on intergenerational inequality using LIS data for 10 countries
#However rather than focus on income inequality be deciles we looked by generation
#Here we are just going to look at the data for Germany
#This analysis looks at disposable income (EDHIW) and wages (PILW)
#The EDHIW file is the equivalised disposable income data for German households by the age of the head of the household

#Let's read one of the csv files into R
#To read in the data we’ll type…
read.csv("DE_EDHIW.csv") 

#What can you see?

#Now in this case we want to give the data set a name
#Or assign the csv a name so we can recall it by its object name

disposableincome <- read.csv("DE_EDHIW.csv")

#In R the default when a csv is being read in by R is to treat the first row as a header row

#Let’s open our data and take a look
#We can call up the data set in our work area
#The command to see the data in a tabulated format is View, with a capital 'V'
View(disposableincome)

#Take a look at the data, what do you think it relates to?

#There are also ways to load other file types into RStudio

#If the separator is a tab, ie an Excel file, use this format...
# read.table() or read.csv()
# df <- read.table("<FileName>.txt",		
#                  header = FALSE)			  
#
#If the separator is a comma, you can use this format...
# df <- read.table("<FileName>.csv",		
#                  header = FALSE,
#                  sep = ",")
#
#In our previous examples we had no problem with headers
#The default in RStudio is to treat the first row as a header

#######################
##2. Data types in R ##
#######################

#R treats data differently dependent on the data type
#For anyone who has used Excel think of this as something similar to the format of a cell or a column of data
#In SQL we need to categorise the data type, column-by-column or variable-by-variable, before we load a table of data
#R is no different and similarly if the data type is not correct we can run into problems when trying to perform calculations

#Let's look at the data types in the data set we just loaded into RStudio
#Call up the DE_EDHIW file...

#Now let's look over in the workspace and click the down arrow
#What data types are the variables, or column headers, of the data we loaded in?

#Let's talk through the data types
#The key data types we'll be concerned with in R are:
# - numeric
# - integer
# - character
# - factor

#If we wanted to assign the data types of the variables we loaded the file into RStudio we could define the data types like this
# de_edhiw <- read.csv("DE_EDHIW.csv",
#					  colClasses=c(Survey="character", 
#					  Age="character", 
#					  rep("numeric",5)))

#We'll return to data types later over the next two days
#However it's important to be aware of the different data types as you load and work with data sets

######################################
##3. Getting familiar with our data ##
######################################

#What does the data look like?
#What kinds of things might you want to find from this data?
#What are the top lines you would want to find from the data? 

#When we load the data into RStudio these are the key questions we should bear in mind
#We should do this whilst always thinking of analysing the data for story lines

#One of the first things we might want to do after loading a data set is get a sense of the size of the data
#Let's look at some of the dimensions of the data
#How many rows and columns does the data have?

#We use the dim function and call the data set
dim(disposableincome)

#We now get the dimensions of the data
#What does the response mean?

#But let's look closer at the command as well...
#This is the process for most commands, state the function and the data set

#Now let's get a sense of the data set
#What are the variable or column names?
names(disposableincome)

#What do the first 6 rows of data look like?
head(disposableincome)

#What do the last 6 rows of data look like?
tail(disposableincome)

#How many rows are in the data set?
nrow(disposableincome)

#How many columns are in the data set?
ncol(disposableincome)

#####################################
## Data transformations in Rstudio ##
#####################################

#In this session we sort, filter and join data sets

#In this class we'll look at:
#1. Packages in R
#2. Sorting & filtering our data
#3. Combining data
#4. Joining & new variables

######################
## 1. Packages in R ##
######################

#Packages in R are wonderful tools that can allow you do amazing things!
#They are sets of code that have specific functions
#We're going to use a variety of different packages for the class
#There are a large range out there but the best approach is to find one you like
#Each package can have it's own syntax or order of how commands and data should be referred to
#Learn everything about it - what it does, the commands to use and the syntax
#And master one at a time

#To explore all the packages available
library()

#To look at the list of packages currently loaded in R
#You can look at the "Packages" tab or try
search()

#Some of the best packages for data analysis are dplyr and tidyr let's install them now

#dplyr
install.packages("dplyr")

#Note you need to call the package using "", i.e. "dplyr"
#This is one of R's quirks when it comes to packages
#Let’s look at where the package is installed

#The package also needs to be loaded from the library in order to use it
library("dplyr")

#Let's also install tidyr
#Follow the steps above to install the package

#Ensure the package is also loaded to the library
#There are two ways to do this, manually and programmatically

#####################################
## 2. Sorting & filtering our data ##
#####################################

#Now we have the data and packages loaded, let's play with the data
#For those of you familiar with Excel, this will be easy!

#Let's sort the data, high to low
arrange(disposableincome,EDHIW)

#As you can see the sort prints the results to the console
#But let's take a look in the table format...
View(arrange(disposableincome,EDHIW))

#What is happening in the command above?
#This is an example of a nested function

#Let's mix it up and sort in the other direction
arrange(disposableincome,desc(EDHIW))

#Now I want you to type in the command to view the data in descending order
#But this time bring up the results in the table panel...
#Now let's call it up in the data frame environment

#Let's look at filtering
#What if I don't want to see all the age groups?
#Let's say I only want to see people 80 years and over
#We can subset the data using grep
#grep searches for a string of matching characters
#isolates the strings that match and returns them
disposableincome[grep("80 years and over", disposableincome$Age), ]
#What's happening in the above command...

#This time let's also assign the subset to an object so we can recall it
di_80 <- disposableincome[grep("80 years and over", disposableincome$Age), ]
View(di_80)
  
#Now pull the subset for 25 to 29 year olds
#Assign it to a unique name as well by following the steps above

#As with most programming languages there are many ways to reach the same result 
#Above we are filtering the data by referring to variable names
#Another way to filter data is by using grep tools

#There are other ways of filtering too
#filter is part of the dplyr package and works with logical operators
filter(disposableincome, Age == "80 years and over")

#Here are some of the logical operators that can be used with filter
# < Less than 
# > Greater than
# == Equal to
# != Not Equal to
# <= Less than or equal to
# >= Greater than or equal to
# | Or
# & And
# %in% Group membership
# is.na Is NA

#Now I want you to apply what we’ve just done
#You’ll need to create five different subsets and assign them to an object

#1. Sort the data and assign it to a new variable
#2. Filter the data and assign it to a new variable
#3. - 5. Use three logical operators, in grep, and assign them to new variables

#######################
## 3. Combining data ##
#######################

#So we have been working with disposable income data for Germany from 1984 to 2004
#But LIS has just given us another year's worth of data
#This is a common occurrence with a story and a dataset that you tend to revisit
#Rather than reinvent the wheel, we'll append the data to our existing dataset
#That way we can build on the R project we have, rather than starting anew

#Let's load the data set in and assign it to an object
disposableincome2010 <- read.csv("DE_EDHIW_10.csv")

#Take a look at the data
View(disposableincome2010)

#We want to add the data to our existing data set
#Let's look at the structure of the data
#Does it look like something we can join?

#To append the rows we'll use a function of one of the packages we installed earlier
#We'll use bind_rows, a function of dplyr

all_de <- bind_rows(disposableincome,disposableincome2010)

#What is going on when we run the function above?
#It throws an error...

#Let's talk about class of the variables
#To look at the class you can use sapply
sapply(disposableincome, class)
sapply(disposableincome2010, class)

#Let's look at the class of columns in the new file
sapply(all_de, class)

#We need to coerce the data from one type to another 
#We can change the class back to it's original form as a factor...
all_de$Survey <- factor(all_de$Survey)

#So now we have the complete data set with the addition of 2010 data in the correct form

View(all_de)

#Tip - Columns don't need to match when using row bind
#You can bind rows by dropping some columns
#bind_rows(data.frame(x = 1:3), data.frame(y = 1:4))

#################################
## Basic Statistics in RStudio ##
#################################

#In this session we're going to look at creating projects and statistics in RStudio

#In this class we'll look at:
#1. Creating a project
#2. Built in data in R
#3. Basic descriptive statistics
#4. Beyond summary statistics

##########################
##1. Creating a project ##
##########################

#We’re going to create a project in R
#This is where all your data and scripts will be held
#Think of it like a folder where everything related to one project is kept

#Before we do that let’s check where this session of R is being run from
#Let's open R and check our working directory
#Type this into the console
getwd()

#What is returned is the “working directory”
#This is the address on the computer where the files are stored
#Why do directories matter in R?

#We could change our working directory with setwd()
#But in this case let’s set the working directory when we start a new project
#In a project you can keep all your scripts, files and analysis in one place

#Let’s follow these steps together…
#Look in the top right corner for a small blue icon - a cube with an R inside
#Click on it and select the first option “New Project”
#Then select “New Directory” from the pop-up dialogue box
#Select “Empty Project”
#In the next dialogue box name your project
#We’re going to call the project “Statistics”
#We also want to check the address or directory where the project will be stored
#This is shown in the “Save a subdirectory of…” box
#In the box is the location on your computer where the project will be saved
#You can change it now if needed
#Let’s all set our working directory to R Class on the Desktop 

#You can of course move the location later but it can cause complications

##########################
##2. Built in data in R ##
##########################

#R comes with a number of built in packages for analysis
#This means you can run simple analysis on practice data sets

#To see how R gives you the ability to analyse your data simply and effectively we're going to use one it's built in data packages

#To see a full list of the packages
data()

#We're going to use airquality data set for this class
#Open it up and take a look…
airquality

#Let’s also find out more about the data set
?airquality

#If we were going to use this in a story about air pollution what might we want to know?

###################################
##3. Descriptive statistics in R ##
###################################

#We've already looked at what to do when you have a data set and you need to clean it or join data to a table
#What about when you want to explore the data itself?

#The first step is to look at the descriptive statistics
#What are descriptive statistics?

#The summary function gives you basic descriptive statistics 
??summary

#Let’s look at the summary statistics for the Wind column in the airquality data set
summary(airquality$Wind)

#Let’s look through the details of what is returned from this query…
#What might you want to use these for?

#Let’s run the summary analysis for the entire data set
summary(airquality)

#There are some unusual results in there
#Any ideas why we are getting the summary stats for month and day?

#Looking at the results, what might you use from this to describe your data? 
#Let’s come up with a few top lines from the data for a story…

#################################
##4. Beyond summary statistics ##
#################################

#Let’s load in a new data set from my github page
#We’re going to look at data on smokers

#Let’s read in the data
#Note we’re reading in a table this time
lung <- read.table("LungCapData.txt", header=T)

#What’s different about this data to that of before?

#Let’s check out the data headers
names(lung)

#Of course we can also get the summary statistics for the entire table as well
summary(lung)
#What is different in this summary table to the first one we created?

#If we want to summarize a categorical variable, Smoke, this is done in a summary table
#It’s summarized by a frequency or proportion
table(lung$Smoke)

#So we know the number of smokers and non-smokers
#Let’s get the total number of people in the survey
length(lung$Smoke)

#Let’s use this to calculate the proportion of smokers and non-smokers
table(lung$Smoke)/725

#Or we can do it like this…
table(lung$Smoke)/length(lung$Smoke)
#Why does this also work?

#Let’s look at this based on the gender breakdown
table(lung$Smoke, lung$Gender)

#Let’s look at working with the numeric variables in the data set
#We’ll consider the appropriate number to use looking at the average…
mean(lung$LungCap)

#We can also trim the mean if we are concerned that there may be outliers
mean(lung$LungCap, trim=0.10)

#What can you tell by comparing the results of the mean and the trimmed mean?

#Let’s look at the median as well
median(lung$LungCap)

#Based on these results what number might you want to report in your story?

#Let’s take a further look at some of the further simple stats functions..

#To calculate the variance use var
var(lung$LungCap)
#When might we use this?

#Let’s get the standard deviation
sd(lung$LungCap)

#Let’s look at the correlation between lung capacity and age
cor(lung$LungCap, lung$Age)
#How can we interpret the result?

#Run a number of other correlations
#What other variables appear to have a strong correlation?

#Of the numbers you've worked with, which would you need to consider in reporting?
#Write up five things you would consider or report from this dataset
